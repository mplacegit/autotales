'use strict';

var EventEmitter = require('events').EventEmitter;
var inherits = require('util').inherits;
var VAST = require('vastacular').VAST;
var JavaScriptVPAIDPlayer = require('./players/JavaScriptVPAID');
var FlashVPAIDPlayer = require('./players/FlashVPAID');
var HTMLVideoPlayer = require('./players/HTMLVideo');
var IOSVideoPlayer = require('./players/IOSVideo');
var MIME = require('./enums/MIME');
var EVENTS = require('./enums/VPAID_EVENTS');
var EventProxy = require('./EventProxy');
var LiePromise = require('lie');
var PixelReporter = require('./PixelReporter');

/*
function simulateClick() {
  var event = new MouseEvent('click', {
    'view': window,
    'bubbles': true,
    'cancelable': true
  });
  var cb = document.getElementById('container'); 
  var canceled = !cb.dispatchEvent(event);
  if (canceled) {
    // A handler called preventDefault.
   // alert("canceled");
  } else {
    // None of the handlers called preventDefault.
    //alert("not canceled");
  }
}
*/
function isAndr() {
return /Android|Silk|Mobile|PlayBook/.test(window.navigator.userAgent);
}
function iOS() {

  var iDevices = [
    'iPad Simulator',
    'iPhone Simulator',
    'iPod Simulator',
    'iPad',
    'iPhone',
    'iPod'
  ];
//return true;
  if (!!navigator.platform) {
    while (iDevices.length) {
      if (navigator.platform === iDevices.pop()){ return true; }
    }
  }

  //return isAndr();
  return false;
}
function defaults(/*...objects*/) {
    var result = {};
    var length = arguments.length;
    var index, object;
    var prop, value;

    for (index = 0; index < length; index++) {
        object = arguments[index] || {};

        for (prop in object) {
            value = object[prop];

            if (result[prop] === undefined) {
                result[prop] = value;
            }

            if (typeof value === 'object') {
                result[prop] = defaults(result[prop], value);
            }
        }
    }
  
    return result;
}

function identity(value) {
    return value;
}

function getNotReadyError() {
    return new Error('VASTPlayer not ready.');
}

function proxy(method) {
    return function callMethod() {
        var self = this;
        var player = this.__private__.player;

        if (!this.ready) {
            return LiePromise.reject(getNotReadyError());
        }
        return player[method].apply(player, arguments).then(function() {
            return self;
        });
    };
}

function proxyProp(property) {
    return {
        get: function get() {
            if (!this.ready) { throw getNotReadyError(); }

            return this.__private__.player[property];
        },

        set: function set(value) {
            if (!this.ready) { throw getNotReadyError(); }

            return (this.__private__.player[property] = value);
        }
    };
}
function VASTPlayer(container, config) {
    var self = this;
    EventEmitter.call(this); // call super()
    this.__private__ = {
	    index: -1,
        container: container,
        config: defaults(config, {
            vast: {
                resolveWrappers: true,
                maxRedirects: 5
            },
            tracking: {
                mapper: identity
            }
        }),

        vast: null,
        ready: false,
        player: null,
		pType:0
    };
this.on(EVENTS.AdRemainingTimeChange, function onAdRemainingTimeChange(args) {
var sec =self.adRemainingTime;
var duration=self.adDuration;
if(!duration || !sec) return true;
var sec=duration-sec;
self.__private__.config.timerFunc({sec:sec,dur:duration,index:self.__private__.index});
return true;
}); 
this.on(EVENTS.AdSkipped, function AdSkipped(args) {
});


this.on(EVENTS.AdClickThru, function onAdClickThru(url, id, playerHandles) {
      //console.log(["11 или несколько "+this.__private__.index]);
	  if(this.__private__.index == -1) {
	  //console.log([5552,this.isPaused]);
	  //alert(this.__private__.player.video.style.opacity);
	  if(iOS()){
	  
	  if(typeof this.isPaused !='undefined' && this.isPaused){
	  this.isPaused=0;
	  this.resumeAd(); 
	  }else{
	  this.isPaused=1;
	  this.pauseAd();
	  }
	  }
	  return false; //не волк
	  }
	  if(!self.vast) return;
       var clickThrough = url || self.vast.get('ads[0].creatives[0].videoClicks.clickThrough');
        if (playerHandles && clickThrough) {
            window.open(clickThrough);
        }
    });
};
inherits(VASTPlayer, EventEmitter);
Object.defineProperties(VASTPlayer.prototype, {
    container: {
        get: function getContainer() {
            return this.__private__.container;
        }
    },

    config: {
        get: function getConfig() {
            return this.__private__.config;
        }
    },

    vast: {
        get: function getVast() {
            return this.__private__.vast;
        }
    },

    ready: {
        get: function getReady() {
            return this.__private__.ready;
        }
    },

    adRemainingTime: proxyProp('adRemainingTime'),
    adDuration: proxyProp('adDuration'),
    adVolume: proxyProp('adVolume')
});
VASTPlayer.prototype.PlayMp4 = function PlayMp4(config) {
var self = this;
if( iOS()){
var player = new IOSVideoPlayer(self.container);

}else{
 var player = new HTMLVideoPlayer(self.container);
}


          var proxy = new EventProxy(EVENTS);
 		  proxy.from(player).to(self);
                  self.__private__.player = player;
		  self.__private__.index = -1;
		   
  		 return player.load(config.mediafiles, {}).then(function setupPixels() {
		 self.__private__.ready = true;
		 //self.__private__.player.video.autoplay=true;
		 self.__private__.player.video.controls=true;
		 
		  self.emit('ready');
		  //self.startAd();
		
		
        
        return self;
		}).catch(function emitError(reason) {
		  self.emit('error', reason);
		  throw reason;
	   });
};
VASTPlayer.prototype.preparePlay = function preparePlay(config) {
         var self = this; 
		
         var proxy = new EventProxy(EVENTS);
		 proxy.from(self.__private__.player).to(self);
		 		
		
		 return self.__private__.player.load(self._mediaFiles, self._parameters).then(function setupPixels() {
		   
	     self._reporter.track(self.__private__.player); 
		 self.__private__.ready = true;
		
         self.emit('ready');
		 
         return self;
		}).catch(function emitError(reason) { 
		   self.emit('error', reason);
		   throw reason; 
	   });
     
};

VASTPlayer.prototype.loadNew = function loadNew(uri) {
    var self = this;
    var config = this.config.vast;
    function checkIfFlashEnabled() {
    var isFlashEnabled = false;
    if (typeof(navigator.plugins) != "undefined" && typeof(navigator.plugins["Shockwave Flash"]) == "object") isFlashEnabled = true;
    else if (typeof  window.ActiveXObject != "undefined") {
        // Проверка для IE
        try {
            if (new ActiveXObject("ShockwaveFlash.ShockwaveFlash")) isFlashEnabled = true;
        } catch (e) {
        }
    }
     return isFlashEnabled;
    };

 //console.log([8222133,window.MPOverControl]);
    return VAST.fetch(uri, config).then(function loadPlayer(vast) {
 //var myfiles = vast.filter('ads[0].creatives[0].mediaFiles', function() { return true; });
 
  
	   var myIos=iOS();
        var config = (function() {
            var jsVPAIDFiles = vast.filter('ads[0].creatives[0].mediaFiles', function(mediaFile) {
                return (
                    mediaFile.type === MIME.JAVASCRIPT ||
                    mediaFile.type === 'application/x-javascript'
                ) && mediaFile.apiFramework === 'VPAID';
            });
            var swfVPAIDFiles = vast.filter('ads[0].creatives[0].mediaFiles', function(mediaFile) {
			        return mediaFile.type === MIME.FLASH && mediaFile.apiFramework === 'VPAID' && checkIfFlashEnabled();
            });
            var files = vast.filter('ads[0].creatives[0].mediaFiles', function() { return true; });
			
			
            if (jsVPAIDFiles.length > 0) {
			self.__private__.pType=1;
                return {
                    player: new JavaScriptVPAIDPlayer(self.container),
                    mediaFiles: jsVPAIDFiles
                };
            } else if (!myIos &&  swfVPAIDFiles.length > 0) {
			  self.__private__.pType=2;
                return {
                    player: new FlashVPAIDPlayer(self.container, VASTPlayer.vpaidSWFLocation),
                    mediaFiles: swfVPAIDFiles
                };
            }
			if(myIos){
			self.__private__.pType=3;
            return {
			
			    player: new IOSVideoPlayer(self.container),
                mediaFiles: files
            };
			}else{
			self.__private__.pType=3;
			   return {
                player: new HTMLVideoPlayer(self.container),
                mediaFiles: files
            };
			}
        }());
	
        var parameters = vast.get('ads[0].creatives[0].parameters');
		
		var pixels = [].concat(
            vast.map('ads[0].impressions', function(impression) {
                return { event: 'impression', uri: impression.uri.replace(/^\s+|\s+$/,'') };
            }),
            vast.map('ads[0].errors', function(uri) {
                return { event: 'error', uri: uri.replace(/^\s+|\s+$/,'') };
            }),
            vast.get('ads[0].creatives[0].trackingEvents'),
            vast.map('ads[0].creatives[0].videoClicks.clickTrackings', function(uri) {
                return { event: 'clickThrough', uri: uri.replace(/^\s+|\s+$/,'') };
            })
        );
		if(!config || !config.player)
		throw "no config of player";  
        var player = config.player;
         var reporter = new PixelReporter(pixels, self.config.tracking.mapper);
		 self.__private__.vast = vast;
		 self.__private__.index = self.linkIndex;
         self.__private__.player = config.player;
		 self._reporter=reporter;
		 self._mediaFiles=config.mediaFiles;
		 self._parameters=parameters;
 		//var res={reporter:reporter,vast:vast,player:player,mediaFiles:mediaFiles,parameters:parameters,playType:self.__private__.pType};
		return true;
    }).catch(function emitError(reason) {
	    self.emit('error', reason);
		throw reason;
    });
	
};   
VASTPlayer.prototype.startAd = proxy('startAd');

VASTPlayer.prototype.stopAd = proxy('stopAd');

VASTPlayer.prototype.pauseAd = proxy('pauseAd');

VASTPlayer.prototype.resumeAd = proxy('resumeAd');

//VASTPlayer.prototype.skipAd = proxy('skipAd');


VASTPlayer.vpaidSWFLocation = 'https://cdn.jsdelivr.net' +
    '/vast-player/__VERSION__/vast-player--vpaid.swf';

module.exports = VASTPlayer;
