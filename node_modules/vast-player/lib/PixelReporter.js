'use strict';

var EVENTS = require('./enums/VPAID_EVENTS');

function identity(value) {
    return value;
}

function fire(pixels, mapper) {

    (pixels || []).forEach(function(src) {
	src=src.replace(/^\s+|\s+$/,'');
	//if(typeof window.regularMassive.files[src]=='undefined'){
	 //console.log([7355,'передой',src]);
	// window.regularMassive.files[src]=3;
	//}else{
	 //window.regularMassive.files[src]=0;
	//}
	  //if(/tns-counter/.exec(src)){
	  //console.log([7351,src]);
	 // }
	  //console.log([7355,'передой',src]);
      new Image().src = mapper(src);
    });
}

function PixelReporter(pixels, mapper) {
    this.pixels = pixels.reduce(function(pixels, item) {
	     //console.log([77774,item.event]);
        (pixels[item.event] || (pixels[item.event] = [])).push(item.uri);
        return pixels;
    }, {});

    this.__private__ = {
        mapper: mapper || identity
    };
}
PixelReporter.prototype.manualCase = function manualCase(type) {
 var pixels = this.pixels;
 var customMapper = this.__private__.mapper;
  var self = this;
    function fireType(type, mapper, predicate) {
        function pixelMapper(url) {
            return customMapper((mapper || identity)(url));
        }

            //return function firePixels() {
			
		    //console.log([7359,type,pixels[type]]);
            if (!predicate || predicate()){
			
			//window.regularMassive.tracked[type]=pixels[type];
			     self.PlayToBridge(type,pixels[type]);
                 fire(pixels[type], pixelMapper);
            }else{
			//console.log([7358,type,pixels[type]]); 
			}
        //};
    }
fireType(type);
};
PixelReporter.prototype.PlayToBridge = function PlayToBridge(type,arr) {
  
};
PixelReporter.prototype.track = function track(vpaid) {
    var pixels = this.pixels;
    var self = this;
    var customMapper = this.__private__.mapper;
    var lastVolume = vpaid.adVolume;

    function fireType(type, mapper, predicate) {
        function pixelMapper(url) {
            return customMapper((mapper || identity)(url));
        }
       
        return function firePixels() {
            if (!predicate || predicate()) {
			/*
			var keyy='1';
			id_src=1008;
			if(typeof window.GlobalMyGUITemp !='undefined'){
			var keyy=window.GlobalMyGUITemp
			}
			if(typeof window.Globalid_src !='undefined'){
			var id_src=window.Globalid_src;
			}
			var remdata={event:type,key:keyy,id_src:id_src};
			var src1="http://api.market-place.su/Product/video/ios.php?p="+Math.random()+"&data="+encodeURIComponent(JSON.stringify(remdata));
			//alert(remdata);
			new Image().src = src1;
			*/
			//console.log([7359,type,pixels[type]]);
			//window.regularMassive.tracked[type]=pixels[type];
				self.PlayToBridge(type,pixels[type]);
            fire(pixels[type], pixelMapper);
            }else{
			//console.log([7358,type,pixels[type]]); 
			}
        };
    }
	 // vpaid.on(EVENTS.AdVideoStart, fireType('start'));
	// vpaid.on(EVENTS.AdStarted, fireType('creativeView'));
	 
	 //vpaid.on(EVENTS.AdVideoFirstQuartile, fireType('firstQuartile'));
	 

    vpaid.on(EVENTS.AdSkipped, fireType('skip'));
    vpaid.on(EVENTS.AdStarted, fireType('creativeView'));
   vpaid.on(EVENTS.AdVolumeChange, fireType('unmute', null, function() {
        return lastVolume === 0 && vpaid.adVolume > 0;
    }));
    vpaid.on(EVENTS.AdVolumeChange, fireType('mute', null, function() {
        return lastVolume > 0 && vpaid.adVolume === 0;
    }));
    vpaid.on(EVENTS.AdImpression, fireType('impression'));
    vpaid.on(EVENTS.AdVideoStart, fireType('start'));
    vpaid.on(EVENTS.AdVideoFirstQuartile, fireType('firstQuartile'));
    vpaid.on(EVENTS.AdVideoMidpoint, fireType('midpoint'));
    vpaid.on(EVENTS.AdVideoThirdQuartile, fireType('thirdQuartile'));
    vpaid.on(EVENTS.AdVideoComplete, fireType('complete'));
    vpaid.on(EVENTS.AdClickThru, fireType('clickThrough'));
    vpaid.on(EVENTS.AdUserAcceptInvitation, fireType('acceptInvitationLinear'));
    vpaid.on(EVENTS.AdUserMinimize, fireType('collapse'));
    vpaid.on(EVENTS.AdUserClose, fireType('closeLinear'));
    vpaid.on(EVENTS.AdPaused, fireType('pause'));
    vpaid.on(EVENTS.AdPlaying, fireType('resume'));
    vpaid.on(EVENTS.AdError, fireType('error', function(pixel) {
        return pixel.replace(/\[ERRORCODE\]/g, 901);
    }));

    vpaid.on(EVENTS.AdVolumeChange, function updateLastVolume() {
        lastVolume = vpaid.adVolume;
    });
	
};

module.exports = PixelReporter;
